scalar DateTime

type AuthPayload {
  token: String!
  user: User!
}

# Type for User
type User {
  githubLogin: ID!
  githubToken: String
  name: String
  avatar: String
  postedPhotos: [Photo!]!
  inPhotos: [Photo!]!
}

# Enumeration for Photo Categories
enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

# Photo type definition
type Photo {
  id: ID!
  url: String!
  name: String!
  description: String
  category: PhotoCategory!
  created: DateTime!
  postedBy: User!
  taggedUsers: [User!]!
}

# Use in a mutation to handle multiple parameters
input PostPhotoInput {
  name: String!
  description: String
  category: PhotoCategory = PORTRAIT
}

# The "Query" type is special: it lists all of the available queries that
# clients can execute, along with the return type for each. In this
# case, the "books" query returns an array of zero or more Books (defined above).
type Query {
  me: User
  allPhotos: [Photo!]!
  totalPhotos: Int!
  allUsers: [User!]!
  totalUsers: Int!
}

type Mutation {
  postPhoto(input: PostPhotoInput!): Photo!
  githubAuth(code: String!): AuthPayload!
  addFakeUsers(count: Int = 1): [User!]!
}
